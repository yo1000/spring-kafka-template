services:
  producer-app:
    build:
      context: ./kafka-producer
      args:
        JAR: ./target/*.jar
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA_CORE: debug
    ports:
      - "8080:8080"
      - "8090:8090"

  consumer-app:
    build:
      context: ./kafka-consumer
      args:
        JAR: ./target/*.jar
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/sales_statistics
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA_CORE: debug
      LOGGING_LEVEL_COM_YO1000_KAFKA_CONSUMER_PRESENTATION: debug
    ports:
      - "8081:8080"
      - "8091:8090"

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sales_statistics
    healthcheck:
      test: pg_isready -U pgweb -h 127.0.0.1
      interval: 5s

  # Simple DB viewer
  dbgate:
    image: dbgate/dbgate
    environment:
      CONNECTIONS: conn1
      LABEL_conn1: postgres
      SERVER_conn1: postgres
      USER_conn1: postgres
      PASSWORD_conn1: postgres
      PORT_conn1: 5432
      ENGINE_conn1: postgres@dbgate-plugin-postgres
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "3000:3000"

  # More detailed DB viewer
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    user: root
    entrypoint: |
      sh -c '
        cat <<EOF > /pgadmin4/servers.json
      {
        "Servers": {
          "1": {
            "Name": "Postgres",
            "Group": "Servers",
            "Host": "postgres",
            "Port": 5432,
            "MaintenanceDB": "sales_statistics",
            "Username": "postgres",
            "SSLMode": "prefer"
          }
        }
      }
      EOF
        exec /entrypoint.sh
      '
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5050:80"

  kafka:
    image: apache/kafka-native
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1

  kafka-ui:
    image: kafbat/kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8092:8080"
    depends_on:
      - kafka
